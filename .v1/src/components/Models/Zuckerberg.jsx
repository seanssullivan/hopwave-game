/*
auto-generated by: https://github.com/react-spring/gltfjsx
author: impoimpo (https://sketchfab.com/impoimpo)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/elon-musk-running-6ad4bbc11db84e29aa270089d143b38c
title: Elon Musk Running
*/

import * as THREE from "three";
import React, { useRef, useState, useEffect } from "react";
import { useLoader, useFrame } from "react-three-fiber";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";

// Import hooks
import useKeyPress from "../../hooks/useKeyPress";
import useMovement from "../../hooks/useMovement";

// Import settings
import settings from "../../settings";
const { ACCELERATION, TURN_SPEED, ROTATION, BOUNDARY } = settings.CAR;

export default function Model(props) {
  const { avgSpeed, setPosition, setSpeed } = props;
  const group = useRef();
  const { nodes, materials, animations } = useLoader(
    GLTFLoader,
    "/Elon/scene.gltf"
  );

  // const actions = useRef();
  const [mixer] = useState(() => new THREE.AnimationMixer());
  useFrame((state, delta) => mixer.update(delta));
  useEffect(() => void mixer.clipAction(animations[0], group.current).play(), [
    animations,
    mixer,
  ]);

  const move = useMovement(group, "x", setPosition);

  const { keyPressed: aKeyPressed } = useKeyPress("a");
  const { keyPressed: dKeyPressed } = useKeyPress("d");
  const { keyPressed: wKeyPressed } = useKeyPress("w");
  const { keyPressed: sKeyPressed } = useKeyPress("s");

  useFrame(() => {
    // Move the car side-to-side using the A and D keys
    if (aKeyPressed && group.current.position.x <= BOUNDARY) {
      if (group.current.rotation.y < 0.1) {
        // Add a slight rotation when car is moving to the right
        group.current.rotation.y += ROTATION;
      }
      move(TURN_SPEED);
    }
    if (dKeyPressed && group.current.position.x >= 0 - BOUNDARY) {
      if (group.current.rotation.y > -0.1) {
        // Add a slight rotation when car is moving to the left
        group.current.rotation.y -= ROTATION;
      }
      move(0 - TURN_SPEED);
    }

    // Straight car when not moving to either side
    if (
      (!aKeyPressed && !dKeyPressed) ||
      group.current.position.x >= BOUNDARY ||
      group.current.position.x <= 0 - BOUNDARY
    ) {
      if (group.current.rotation.y < 0) {
        group.current.rotation.y += ROTATION;
      }
      if (group.current.rotation.y > 0) {
        group.current.rotation.y -= ROTATION;
      }
    }

    // Control speed with W and S keys
    if (wKeyPressed) {
      setSpeed((prev) => (prev >= 7 ? prev : (prev += ACCELERATION)));
    }
    if (sKeyPressed) {
      setSpeed((prev) => (prev <= 3 ? prev : (prev -= ACCELERATION)));
    }
    if (!wKeyPressed && !sKeyPressed) {
      setSpeed((prev) => {
        return prev > avgSpeed
          ? (prev -= ACCELERATION)
          : prev < avgSpeed
          ? (prev += ACCELERATION)
          : prev;
      });
    }
  });
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group scale={[0.13, 0.13, 0.13]}>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <primitive object={nodes._rootJoint} />
            <group
              position={[0, -2.9, 158.42]}
              rotation={[Math.PI / 2, 0, 0]}
            />
            <skinnedMesh
              material={materials.bow_tie}
              geometry={nodes["bow_tie_bow tie_0"].geometry}
              skeleton={nodes["bow_tie_bow tie_0"].skeleton}
            />
            <skinnedMesh
              material={materials.Blazer}
              geometry={nodes.Blazer_Blazer_0.geometry}
              skeleton={nodes.Blazer_Blazer_0.skeleton}
            />
            <skinnedMesh
              material={materials.Henley_Longsleeve}
              geometry={nodes["Henley_Longsleeve_Henley Longsleeve_0"].geometry}
              skeleton={nodes["Henley_Longsleeve_Henley Longsleeve_0"].skeleton}
            />
            <skinnedMesh
              material={materials.Jeans}
              geometry={nodes.Jeans_Jeans_0.geometry}
              skeleton={nodes.Jeans_Jeans_0.skeleton}
            />
            <skinnedMesh
              material={materials.Boots}
              geometry={nodes.Boots_Boots_0.geometry}
              skeleton={nodes.Boots_Boots_0.skeleton}
            />
            <skinnedMesh
              material={materials.Std_Skin_Head}
              geometry={nodes.CC_Base_Body1_Std_Skin_Head_0.geometry}
              skeleton={nodes.CC_Base_Body1_Std_Skin_Head_0.skeleton}
            />
            <skinnedMesh
              material={materials.Std_Skin_Head}
              geometry={nodes.hands_Std_Skin_Head_0.geometry}
              skeleton={nodes.hands_Std_Skin_Head_0.skeleton}
            />
            <skinnedMesh
              material={materials.embed_hair_male}
              geometry={nodes.Hair_a_embed_hair_male_0.geometry}
              skeleton={nodes.Hair_a_embed_hair_male_0.skeleton}
            />
            <skinnedMesh
              material={materials.eyes}
              geometry={nodes.CC_Base_Eye_eyes_0.geometry}
              skeleton={nodes.CC_Base_Eye_eyes_0.skeleton}
            />
            <skinnedMesh
              material={materials["embed_hair_male.1"]}
              geometry={nodes["Hair_embed_hair_male.1_0"].geometry}
              skeleton={nodes["Hair_embed_hair_male.1_0"].skeleton}
            />
            <skinnedMesh
              material={materials.Fingernail}
              geometry={nodes.hands_Fingernail_0.geometry}
              skeleton={nodes.hands_Fingernail_0.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}
